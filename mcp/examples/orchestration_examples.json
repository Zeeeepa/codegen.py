{
  "name": "codegenapi_orchestration",
  "description": "Examples of agent orchestration patterns",
  "examples": [
    {
      "title": "Create orchestrator agent",
      "description": "First, create the main orchestrator agent that will coordinate other agents",
      "arguments": {
        "repo": "Zeeeepa/codegen.py",
        "task": "ORCHESTRATE",
        "query": "Coordinate analysis of the entire codebase"
      }
    },
    {
      "title": "Create child agent with parent ID",
      "description": "Create a child agent that reports back to the orchestrator",
      "arguments": {
        "repo": "Zeeeepa/codegen.py",
        "task": "ANALYZE",
        "query": "Analyze the authentication module",
        "parent_id": 12345
      }
    },
    {
      "title": "Create multiple child agents",
      "description": "Create multiple child agents in parallel, all reporting to the same orchestrator",
      "code": [
        "JavaScript example of creating multiple child agents",
        "const orchestratorId = 12345;",
        "const modules = ['auth', 'database', 'api', 'frontend'];",
        "",
        "Create a child agent for each module",
        "const childPromises = modules.map(module => {",
        "  return callTool('codegenapi_new', {",
        "    repo: 'Zeeeepa/codegen.py',",
        "    task: 'ANALYZE',",
        "    query: `Analyze the ${module} module in detail`,",
        "    parent_id: orchestratorId",
        "  });",
        "});",
        "",
        "Wait for all child agents to be created",
        "Promise.all(childPromises).then(results => {",
        "  console.log(`Created ${results.length} child agents`);",
        "});"
      ]
    },
    {
      "title": "Auto-resume pattern",
      "description": "When child agents complete, they automatically resume the orchestrator with their results",
      "explanation": [
        "1. The MCP server tracks parent-child relationships between agent runs",
        "2. When a child agent completes, the server checks if the parent is still active",
        "3. If the parent is active, the response is sent directly",
        "4. If the parent is inactive, the server automatically resumes the parent with the child's response",
        "5. This creates a seamless continuation of the conversation even if the client disconnects"
      ]
    }
  ]
}
